// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum Allergenics {
//   Soja
//   Peixe
//   Ovos
//   Mariscos
//   Nozes
//   Amendoim
//   Gluten
//   Leite
//   Nenhum
// }

// enum Specifications {
//   Vegetariano
//   Vegano
//   Sem_Gluten
//   Sem_Lactose
// }

// enum FoodOptions {
//   Carnes
//   Massas
//   Pizza
//   Lanches
//   Porcoes
//   Saladas
//   Confeitaria
//   Acai
//   Sorvete
//   Yakisoba
//   Marmitex
//   Esfiha
//   Japones
// }

// enum WeekDay {
//   Segunda_feira
//   Terca_feira
//   Quarta_feira
//   Quinta_feira
//   Sexta_feira
//   Sabado
//   Domingo
// }

model OperationHour {
  operation_hour_id String   @id @default(uuid())
  day               String // WeekDay
  opens_at          DateTime
  closes_at         DateTime

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Cascade, onUpdate: Cascade)
  restaurant_id String     @unique

  @@map("operation_hours")
}

model Dish {
  dish_id        String   @id() @default(uuid())
  name           String
  description    String?
  price          Decimal  @db.Money
  allergenics    String[] // Allergenics 
  specifications String[] // Specifications
  ratings        Int[]

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [restaurant_id], onDelete: Cascade, onUpdate: Cascade)
  restaurant_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Favorite Favorite[]

  @@index([description, specifications, price])
  @@map("dishes")
}

model Restaurant {
  restaurant_id String   @id() @default(uuid())
  name          String
  email         String   @unique
  password_hash String
  description   String?
  phone         String   @unique
  lat           Decimal
  lng           Decimal
  serves        String[] // FoodOptions
  ratings       Int[]

  menu           Dish[]
  operation_hour OperationHour?

  created_at DateTime @default(now())
  updated_at DateTime

  @@index([name, description, serves, lat, lng])
  @@map("restaurants")
}

model Favorite {
  favorite_id String @id @default(uuid())

  customer    Customer @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  customer_id String

  dish    Dish   @relation(fields: [dish_id], references: [dish_id], onDelete: Cascade)
  dish_id String

  @@map("favorites")
}

model Customer {
  customer_id   String   @id @default(uuid())
  name          String
  email         String
  password_hash String
  preferences   String[] // FoodOptions
  allergenics   String[] // Allergenics

  Favorites Favorite[]

  @@map("customers")
}
